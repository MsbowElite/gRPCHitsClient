// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/cont.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace gRPCContagem {
  public static partial class ContadorSvc
  {
    static readonly string __ServiceName = "Cont.ContadorSvc";

    static readonly grpc::Marshaller<global::gRPCContagem.ContadorRequest> __Marshaller_Cont_ContadorRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCContagem.ContadorRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPCContagem.ContadorReply> __Marshaller_Cont_ContadorReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPCContagem.ContadorReply.Parser.ParseFrom);

    static readonly grpc::Method<global::gRPCContagem.ContadorRequest, global::gRPCContagem.ContadorReply> __Method_GerarValor = new grpc::Method<global::gRPCContagem.ContadorRequest, global::gRPCContagem.ContadorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GerarValor",
        __Marshaller_Cont_ContadorRequest,
        __Marshaller_Cont_ContadorReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gRPCContagem.ContReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ContadorSvc</summary>
    public partial class ContadorSvcClient : grpc::ClientBase<ContadorSvcClient>
    {
      /// <summary>Creates a new client for ContadorSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ContadorSvcClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ContadorSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ContadorSvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ContadorSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ContadorSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::gRPCContagem.ContadorReply GerarValor(global::gRPCContagem.ContadorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GerarValor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::gRPCContagem.ContadorReply GerarValor(global::gRPCContagem.ContadorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GerarValor, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCContagem.ContadorReply> GerarValorAsync(global::gRPCContagem.ContadorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GerarValorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCContagem.ContadorReply> GerarValorAsync(global::gRPCContagem.ContadorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GerarValor, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ContadorSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ContadorSvcClient(configuration);
      }
    }

  }
}
#endregion
